// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BitControl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BitControl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace exec {
namespace bit {
namespace control {

namespace {

const ::google::protobuf::Descriptor* BitControlHandshake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitControlHandshake_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* FragmentStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FragmentStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FragmentStatus_FragmentState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlanFragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanFragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkQueueStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkQueueStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_BitControl_2eproto() {
  protobuf_AddDesc_BitControl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BitControl.proto");
  GOOGLE_CHECK(file != NULL);
  BitControlHandshake_descriptor_ = file->message_type(0);
  static const int BitControlHandshake_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitControlHandshake, rpc_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitControlHandshake, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitControlHandshake, endpoint_),
  };
  BitControlHandshake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitControlHandshake_descriptor_,
      BitControlHandshake::default_instance_,
      BitControlHandshake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitControlHandshake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitControlHandshake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitControlHandshake));
  BitStatus_descriptor_ = file->message_type(1);
  static const int BitStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitStatus, fragment_status_),
  };
  BitStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitStatus_descriptor_,
      BitStatus::default_instance_,
      BitStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitStatus));
  FragmentStatus_descriptor_ = file->message_type(2);
  static const int FragmentStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentStatus, memory_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentStatus, batches_completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentStatus, records_completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentStatus, estimated_completion_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentStatus, data_processed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentStatus, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentStatus, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentStatus, running_time_),
  };
  FragmentStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FragmentStatus_descriptor_,
      FragmentStatus::default_instance_,
      FragmentStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FragmentStatus));
  FragmentStatus_FragmentState_descriptor_ = FragmentStatus_descriptor_->enum_type(0);
  PlanFragment_descriptor_ = file->message_type(3);
  static const int PlanFragment_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, network_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, cpu_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, disk_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, memory_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, fragment_json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, assignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, leaf_fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, foreman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, mem_initial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, mem_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, query_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, credentials_),
  };
  PlanFragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanFragment_descriptor_,
      PlanFragment::default_instance_,
      PlanFragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanFragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanFragment));
  WorkQueueStatus_descriptor_ = file->message_type(4);
  static const int WorkQueueStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkQueueStatus, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkQueueStatus, queue_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkQueueStatus, report_time_),
  };
  WorkQueueStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkQueueStatus_descriptor_,
      WorkQueueStatus::default_instance_,
      WorkQueueStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkQueueStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkQueueStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkQueueStatus));
  RpcType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BitControl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitControlHandshake_descriptor_, &BitControlHandshake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitStatus_descriptor_, &BitStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FragmentStatus_descriptor_, &FragmentStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanFragment_descriptor_, &PlanFragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkQueueStatus_descriptor_, &WorkQueueStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BitControl_2eproto() {
  delete BitControlHandshake::default_instance_;
  delete BitControlHandshake_reflection_;
  delete BitStatus::default_instance_;
  delete BitStatus_reflection_;
  delete FragmentStatus::default_instance_;
  delete FragmentStatus_reflection_;
  delete PlanFragment::default_instance_;
  delete PlanFragment_reflection_;
  delete WorkQueueStatus::default_instance_;
  delete WorkQueueStatus_reflection_;
}

void protobuf_AddDesc_BitControl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::exec::bit::protobuf_AddDesc_ExecutionProtos_2eproto();
  ::exec::protobuf_AddDesc_Coordination_2eproto();
  ::exec::shared::protobuf_AddDesc_UserBitShared_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020BitControl.proto\022\020exec.bit.control\032\025Ex"
    "ecutionProtos.proto\032\022Coordination.proto\032"
    "\023UserBitShared.proto\"\213\001\n\023BitControlHands"
    "hake\022\023\n\013rpc_version\030\001 \001(\005\0225\n\007channel\030\002 \001"
    "(\0162\027.exec.shared.RpcChannel:\013BIT_CONTROL"
    "\022(\n\010endpoint\030\003 \001(\0132\026.exec.DrillbitEndpoi"
    "nt\"F\n\tBitStatus\0229\n\017fragment_status\030\001 \003(\013"
    "2 .exec.bit.control.FragmentStatus\"\261\003\n\016F"
    "ragmentStatus\022\022\n\nmemory_use\030\001 \001(\003\022\031\n\021bat"
    "ches_completed\030\002 \001(\003\022\031\n\021records_complete"
    "d\030\003 \001(\003\022\'\n\037estimated_completion_percenta"
    "ge\030\004 \001(\005\022=\n\005state\030\005 \001(\0162..exec.bit.contr"
    "ol.FragmentStatus.FragmentState\022\026\n\016data_"
    "processed\030\006 \001(\003\022(\n\006handle\030\007 \001(\0132\030.exec.b"
    "it.FragmentHandle\022(\n\005error\030\010 \001(\0132\031.exec."
    "shared.DrillPBError\022\024\n\014running_time\030\t \001("
    "\003\"k\n\rFragmentState\022\013\n\007SENDING\020\000\022\027\n\023AWAIT"
    "ING_ALLOCATION\020\001\022\013\n\007RUNNING\020\002\022\014\n\010FINISHE"
    "D\020\003\022\r\n\tCANCELLED\020\004\022\n\n\006FAILED\020\005\"\225\003\n\014PlanF"
    "ragment\022(\n\006handle\030\001 \001(\0132\030.exec.bit.Fragm"
    "entHandle\022\024\n\014network_cost\030\004 \001(\002\022\020\n\010cpu_c"
    "ost\030\005 \001(\002\022\021\n\tdisk_cost\030\006 \001(\002\022\023\n\013memory_c"
    "ost\030\007 \001(\002\022\025\n\rfragment_json\030\010 \001(\t\022*\n\nassi"
    "gnment\030\n \001(\0132\026.exec.DrillbitEndpoint\022\025\n\r"
    "leaf_fragment\030\t \001(\010\022\'\n\007foreman\030\013 \001(\0132\026.e"
    "xec.DrillbitEndpoint\022\035\n\013mem_initial\030\014 \001("
    "\003:\01020000000\022\034\n\007mem_max\030\r \001(\003:\0132000000000"
    "0\022\030\n\020query_start_time\030\016 \001(\003\0221\n\013credentia"
    "ls\030\017 \001(\0132\034.exec.shared.UserCredentials\"f"
    "\n\017WorkQueueStatus\022(\n\010endpoint\030\001 \001(\0132\026.ex"
    "ec.DrillbitEndpoint\022\024\n\014queue_length\030\002 \001("
    "\005\022\023\n\013report_time\030\003 \001(\003*\332\001\n\007RpcType\022\r\n\tHA"
    "NDSHAKE\020\000\022\007\n\003ACK\020\001\022\013\n\007GOODBYE\020\002\022\033\n\027REQ_I"
    "NIATILIZE_FRAGMENT\020\003\022\027\n\023REQ_CANCEL_FRAGM"
    "ENT\020\006\022\027\n\023REQ_FRAGMENT_STATUS\020\007\022\022\n\016REQ_BI"
    "T_STATUS\020\010\022\030\n\024RESP_FRAGMENT_HANDLE\020\t\022\030\n\024"
    "RESP_FRAGMENT_STATUS\020\n\022\023\n\017RESP_BIT_STATU"
    "S\020\013B+\n\033org.apache.drill.exec.protoB\nBitC"
    "ontrolH\001", 1528);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BitControl.proto", &protobuf_RegisterTypes);
  BitControlHandshake::default_instance_ = new BitControlHandshake();
  BitStatus::default_instance_ = new BitStatus();
  FragmentStatus::default_instance_ = new FragmentStatus();
  PlanFragment::default_instance_ = new PlanFragment();
  WorkQueueStatus::default_instance_ = new WorkQueueStatus();
  BitControlHandshake::default_instance_->InitAsDefaultInstance();
  BitStatus::default_instance_->InitAsDefaultInstance();
  FragmentStatus::default_instance_->InitAsDefaultInstance();
  PlanFragment::default_instance_->InitAsDefaultInstance();
  WorkQueueStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BitControl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BitControl_2eproto {
  StaticDescriptorInitializer_BitControl_2eproto() {
    protobuf_AddDesc_BitControl_2eproto();
  }
} static_descriptor_initializer_BitControl_2eproto_;
const ::google::protobuf::EnumDescriptor* RpcType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcType_descriptor_;
}
bool RpcType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BitControlHandshake::kRpcVersionFieldNumber;
const int BitControlHandshake::kChannelFieldNumber;
const int BitControlHandshake::kEndpointFieldNumber;
#endif  // !_MSC_VER

BitControlHandshake::BitControlHandshake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitControlHandshake::InitAsDefaultInstance() {
  endpoint_ = const_cast< ::exec::DrillbitEndpoint*>(&::exec::DrillbitEndpoint::default_instance());
}

BitControlHandshake::BitControlHandshake(const BitControlHandshake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitControlHandshake::SharedCtor() {
  _cached_size_ = 0;
  rpc_version_ = 0;
  channel_ = 0;
  endpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitControlHandshake::~BitControlHandshake() {
  SharedDtor();
}

void BitControlHandshake::SharedDtor() {
  if (this != default_instance_) {
    delete endpoint_;
  }
}

void BitControlHandshake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitControlHandshake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitControlHandshake_descriptor_;
}

const BitControlHandshake& BitControlHandshake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitControl_2eproto();
  return *default_instance_;
}

BitControlHandshake* BitControlHandshake::default_instance_ = NULL;

BitControlHandshake* BitControlHandshake::New() const {
  return new BitControlHandshake;
}

void BitControlHandshake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rpc_version_ = 0;
    channel_ = 0;
    if (has_endpoint()) {
      if (endpoint_ != NULL) endpoint_->::exec::DrillbitEndpoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitControlHandshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rpc_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpc_version_)));
          set_has_rpc_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional .exec.shared.RpcChannel channel = 2 [default = BIT_CONTROL];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::shared::RpcChannel_IsValid(value)) {
            set_channel(static_cast< ::exec::shared::RpcChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_endpoint;
        break;
      }

      // optional .exec.DrillbitEndpoint endpoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitControlHandshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rpc_version = 1;
  if (has_rpc_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rpc_version(), output);
  }

  // optional .exec.shared.RpcChannel channel = 2 [default = BIT_CONTROL];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channel(), output);
  }

  // optional .exec.DrillbitEndpoint endpoint = 3;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->endpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitControlHandshake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rpc_version = 1;
  if (has_rpc_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rpc_version(), target);
  }

  // optional .exec.shared.RpcChannel channel = 2 [default = BIT_CONTROL];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channel(), target);
  }

  // optional .exec.DrillbitEndpoint endpoint = 3;
  if (has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->endpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitControlHandshake::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rpc_version = 1;
    if (has_rpc_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpc_version());
    }

    // optional .exec.shared.RpcChannel channel = 2 [default = BIT_CONTROL];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional .exec.DrillbitEndpoint endpoint = 3;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitControlHandshake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitControlHandshake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitControlHandshake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitControlHandshake::MergeFrom(const BitControlHandshake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rpc_version()) {
      set_rpc_version(from.rpc_version());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_endpoint()) {
      mutable_endpoint()->::exec::DrillbitEndpoint::MergeFrom(from.endpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitControlHandshake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitControlHandshake::CopyFrom(const BitControlHandshake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitControlHandshake::IsInitialized() const {

  return true;
}

void BitControlHandshake::Swap(BitControlHandshake* other) {
  if (other != this) {
    std::swap(rpc_version_, other->rpc_version_);
    std::swap(channel_, other->channel_);
    std::swap(endpoint_, other->endpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitControlHandshake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitControlHandshake_descriptor_;
  metadata.reflection = BitControlHandshake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BitStatus::kFragmentStatusFieldNumber;
#endif  // !_MSC_VER

BitStatus::BitStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitStatus::InitAsDefaultInstance() {
}

BitStatus::BitStatus(const BitStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitStatus::~BitStatus() {
  SharedDtor();
}

void BitStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BitStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitStatus_descriptor_;
}

const BitStatus& BitStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitControl_2eproto();
  return *default_instance_;
}

BitStatus* BitStatus::default_instance_ = NULL;

BitStatus* BitStatus::New() const {
  return new BitStatus;
}

void BitStatus::Clear() {
  fragment_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .exec.bit.control.FragmentStatus fragment_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragment_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fragment_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .exec.bit.control.FragmentStatus fragment_status = 1;
  for (int i = 0; i < this->fragment_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fragment_status(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .exec.bit.control.FragmentStatus fragment_status = 1;
  for (int i = 0; i < this->fragment_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fragment_status(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitStatus::ByteSize() const {
  int total_size = 0;

  // repeated .exec.bit.control.FragmentStatus fragment_status = 1;
  total_size += 1 * this->fragment_status_size();
  for (int i = 0; i < this->fragment_status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragment_status(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitStatus::MergeFrom(const BitStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  fragment_status_.MergeFrom(from.fragment_status_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitStatus::CopyFrom(const BitStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitStatus::IsInitialized() const {

  return true;
}

void BitStatus::Swap(BitStatus* other) {
  if (other != this) {
    fragment_status_.Swap(&other->fragment_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitStatus_descriptor_;
  metadata.reflection = BitStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FragmentStatus_FragmentState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FragmentStatus_FragmentState_descriptor_;
}
bool FragmentStatus_FragmentState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FragmentStatus_FragmentState FragmentStatus::SENDING;
const FragmentStatus_FragmentState FragmentStatus::AWAITING_ALLOCATION;
const FragmentStatus_FragmentState FragmentStatus::RUNNING;
const FragmentStatus_FragmentState FragmentStatus::FINISHED;
const FragmentStatus_FragmentState FragmentStatus::CANCELLED;
const FragmentStatus_FragmentState FragmentStatus::FAILED;
const FragmentStatus_FragmentState FragmentStatus::FragmentState_MIN;
const FragmentStatus_FragmentState FragmentStatus::FragmentState_MAX;
const int FragmentStatus::FragmentState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FragmentStatus::kMemoryUseFieldNumber;
const int FragmentStatus::kBatchesCompletedFieldNumber;
const int FragmentStatus::kRecordsCompletedFieldNumber;
const int FragmentStatus::kEstimatedCompletionPercentageFieldNumber;
const int FragmentStatus::kStateFieldNumber;
const int FragmentStatus::kDataProcessedFieldNumber;
const int FragmentStatus::kHandleFieldNumber;
const int FragmentStatus::kErrorFieldNumber;
const int FragmentStatus::kRunningTimeFieldNumber;
#endif  // !_MSC_VER

FragmentStatus::FragmentStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FragmentStatus::InitAsDefaultInstance() {
  handle_ = const_cast< ::exec::bit::FragmentHandle*>(&::exec::bit::FragmentHandle::default_instance());
  error_ = const_cast< ::exec::shared::DrillPBError*>(&::exec::shared::DrillPBError::default_instance());
}

FragmentStatus::FragmentStatus(const FragmentStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FragmentStatus::SharedCtor() {
  _cached_size_ = 0;
  memory_use_ = GOOGLE_LONGLONG(0);
  batches_completed_ = GOOGLE_LONGLONG(0);
  records_completed_ = GOOGLE_LONGLONG(0);
  estimated_completion_percentage_ = 0;
  state_ = 0;
  data_processed_ = GOOGLE_LONGLONG(0);
  handle_ = NULL;
  error_ = NULL;
  running_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FragmentStatus::~FragmentStatus() {
  SharedDtor();
}

void FragmentStatus::SharedDtor() {
  if (this != default_instance_) {
    delete handle_;
    delete error_;
  }
}

void FragmentStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FragmentStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FragmentStatus_descriptor_;
}

const FragmentStatus& FragmentStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitControl_2eproto();
  return *default_instance_;
}

FragmentStatus* FragmentStatus::default_instance_ = NULL;

FragmentStatus* FragmentStatus::New() const {
  return new FragmentStatus;
}

void FragmentStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    memory_use_ = GOOGLE_LONGLONG(0);
    batches_completed_ = GOOGLE_LONGLONG(0);
    records_completed_ = GOOGLE_LONGLONG(0);
    estimated_completion_percentage_ = 0;
    state_ = 0;
    data_processed_ = GOOGLE_LONGLONG(0);
    if (has_handle()) {
      if (handle_ != NULL) handle_->::exec::bit::FragmentHandle::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::exec::shared::DrillPBError::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    running_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FragmentStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 memory_use = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memory_use_)));
          set_has_memory_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_batches_completed;
        break;
      }

      // optional int64 batches_completed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batches_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batches_completed_)));
          set_has_batches_completed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_records_completed;
        break;
      }

      // optional int64 records_completed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_records_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &records_completed_)));
          set_has_records_completed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_estimated_completion_percentage;
        break;
      }

      // optional int32 estimated_completion_percentage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_estimated_completion_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estimated_completion_percentage_)));
          set_has_estimated_completion_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional .exec.bit.control.FragmentStatus.FragmentState state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::exec::bit::control::FragmentStatus_FragmentState_IsValid(value)) {
            set_state(static_cast< ::exec::bit::control::FragmentStatus_FragmentState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_data_processed;
        break;
      }

      // optional int64 data_processed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_processed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_processed_)));
          set_has_data_processed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_handle;
        break;
      }

      // optional .exec.bit.FragmentHandle handle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_error;
        break;
      }

      // optional .exec.shared.DrillPBError error = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_running_time;
        break;
      }

      // optional int64 running_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_running_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &running_time_)));
          set_has_running_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FragmentStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 memory_use = 1;
  if (has_memory_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->memory_use(), output);
  }

  // optional int64 batches_completed = 2;
  if (has_batches_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->batches_completed(), output);
  }

  // optional int64 records_completed = 3;
  if (has_records_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->records_completed(), output);
  }

  // optional int32 estimated_completion_percentage = 4;
  if (has_estimated_completion_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->estimated_completion_percentage(), output);
  }

  // optional .exec.bit.control.FragmentStatus.FragmentState state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // optional int64 data_processed = 6;
  if (has_data_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->data_processed(), output);
  }

  // optional .exec.bit.FragmentHandle handle = 7;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->handle(), output);
  }

  // optional .exec.shared.DrillPBError error = 8;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->error(), output);
  }

  // optional int64 running_time = 9;
  if (has_running_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->running_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FragmentStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 memory_use = 1;
  if (has_memory_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->memory_use(), target);
  }

  // optional int64 batches_completed = 2;
  if (has_batches_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->batches_completed(), target);
  }

  // optional int64 records_completed = 3;
  if (has_records_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->records_completed(), target);
  }

  // optional int32 estimated_completion_percentage = 4;
  if (has_estimated_completion_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->estimated_completion_percentage(), target);
  }

  // optional .exec.bit.control.FragmentStatus.FragmentState state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // optional int64 data_processed = 6;
  if (has_data_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->data_processed(), target);
  }

  // optional .exec.bit.FragmentHandle handle = 7;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->handle(), target);
  }

  // optional .exec.shared.DrillPBError error = 8;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->error(), target);
  }

  // optional int64 running_time = 9;
  if (has_running_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->running_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FragmentStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 memory_use = 1;
    if (has_memory_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->memory_use());
    }

    // optional int64 batches_completed = 2;
    if (has_batches_completed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->batches_completed());
    }

    // optional int64 records_completed = 3;
    if (has_records_completed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->records_completed());
    }

    // optional int32 estimated_completion_percentage = 4;
    if (has_estimated_completion_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estimated_completion_percentage());
    }

    // optional .exec.bit.control.FragmentStatus.FragmentState state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 data_processed = 6;
    if (has_data_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_processed());
    }

    // optional .exec.bit.FragmentHandle handle = 7;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handle());
    }

    // optional .exec.shared.DrillPBError error = 8;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 running_time = 9;
    if (has_running_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->running_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FragmentStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FragmentStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FragmentStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FragmentStatus::MergeFrom(const FragmentStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memory_use()) {
      set_memory_use(from.memory_use());
    }
    if (from.has_batches_completed()) {
      set_batches_completed(from.batches_completed());
    }
    if (from.has_records_completed()) {
      set_records_completed(from.records_completed());
    }
    if (from.has_estimated_completion_percentage()) {
      set_estimated_completion_percentage(from.estimated_completion_percentage());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_data_processed()) {
      set_data_processed(from.data_processed());
    }
    if (from.has_handle()) {
      mutable_handle()->::exec::bit::FragmentHandle::MergeFrom(from.handle());
    }
    if (from.has_error()) {
      mutable_error()->::exec::shared::DrillPBError::MergeFrom(from.error());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_running_time()) {
      set_running_time(from.running_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FragmentStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FragmentStatus::CopyFrom(const FragmentStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FragmentStatus::IsInitialized() const {

  return true;
}

void FragmentStatus::Swap(FragmentStatus* other) {
  if (other != this) {
    std::swap(memory_use_, other->memory_use_);
    std::swap(batches_completed_, other->batches_completed_);
    std::swap(records_completed_, other->records_completed_);
    std::swap(estimated_completion_percentage_, other->estimated_completion_percentage_);
    std::swap(state_, other->state_);
    std::swap(data_processed_, other->data_processed_);
    std::swap(handle_, other->handle_);
    std::swap(error_, other->error_);
    std::swap(running_time_, other->running_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FragmentStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FragmentStatus_descriptor_;
  metadata.reflection = FragmentStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanFragment::kHandleFieldNumber;
const int PlanFragment::kNetworkCostFieldNumber;
const int PlanFragment::kCpuCostFieldNumber;
const int PlanFragment::kDiskCostFieldNumber;
const int PlanFragment::kMemoryCostFieldNumber;
const int PlanFragment::kFragmentJsonFieldNumber;
const int PlanFragment::kAssignmentFieldNumber;
const int PlanFragment::kLeafFragmentFieldNumber;
const int PlanFragment::kForemanFieldNumber;
const int PlanFragment::kMemInitialFieldNumber;
const int PlanFragment::kMemMaxFieldNumber;
const int PlanFragment::kQueryStartTimeFieldNumber;
const int PlanFragment::kCredentialsFieldNumber;
#endif  // !_MSC_VER

PlanFragment::PlanFragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanFragment::InitAsDefaultInstance() {
  handle_ = const_cast< ::exec::bit::FragmentHandle*>(&::exec::bit::FragmentHandle::default_instance());
  assignment_ = const_cast< ::exec::DrillbitEndpoint*>(&::exec::DrillbitEndpoint::default_instance());
  foreman_ = const_cast< ::exec::DrillbitEndpoint*>(&::exec::DrillbitEndpoint::default_instance());
  credentials_ = const_cast< ::exec::shared::UserCredentials*>(&::exec::shared::UserCredentials::default_instance());
}

PlanFragment::PlanFragment(const PlanFragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanFragment::SharedCtor() {
  _cached_size_ = 0;
  handle_ = NULL;
  network_cost_ = 0;
  cpu_cost_ = 0;
  disk_cost_ = 0;
  memory_cost_ = 0;
  fragment_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assignment_ = NULL;
  leaf_fragment_ = false;
  foreman_ = NULL;
  mem_initial_ = GOOGLE_LONGLONG(20000000);
  mem_max_ = GOOGLE_LONGLONG(20000000000);
  query_start_time_ = GOOGLE_LONGLONG(0);
  credentials_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanFragment::~PlanFragment() {
  SharedDtor();
}

void PlanFragment::SharedDtor() {
  if (fragment_json_ != &::google::protobuf::internal::kEmptyString) {
    delete fragment_json_;
  }
  if (this != default_instance_) {
    delete handle_;
    delete assignment_;
    delete foreman_;
    delete credentials_;
  }
}

void PlanFragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanFragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanFragment_descriptor_;
}

const PlanFragment& PlanFragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitControl_2eproto();
  return *default_instance_;
}

PlanFragment* PlanFragment::default_instance_ = NULL;

PlanFragment* PlanFragment::New() const {
  return new PlanFragment;
}

void PlanFragment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_handle()) {
      if (handle_ != NULL) handle_->::exec::bit::FragmentHandle::Clear();
    }
    network_cost_ = 0;
    cpu_cost_ = 0;
    disk_cost_ = 0;
    memory_cost_ = 0;
    if (has_fragment_json()) {
      if (fragment_json_ != &::google::protobuf::internal::kEmptyString) {
        fragment_json_->clear();
      }
    }
    if (has_assignment()) {
      if (assignment_ != NULL) assignment_->::exec::DrillbitEndpoint::Clear();
    }
    leaf_fragment_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_foreman()) {
      if (foreman_ != NULL) foreman_->::exec::DrillbitEndpoint::Clear();
    }
    mem_initial_ = GOOGLE_LONGLONG(20000000);
    mem_max_ = GOOGLE_LONGLONG(20000000000);
    query_start_time_ = GOOGLE_LONGLONG(0);
    if (has_credentials()) {
      if (credentials_ != NULL) credentials_->::exec::shared::UserCredentials::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanFragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.bit.FragmentHandle handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_network_cost;
        break;
      }

      // optional float network_cost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_network_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &network_cost_)));
          set_has_network_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_cpu_cost;
        break;
      }

      // optional float cpu_cost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpu_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_cost_)));
          set_has_cpu_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_disk_cost;
        break;
      }

      // optional float disk_cost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_disk_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &disk_cost_)));
          set_has_disk_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_memory_cost;
        break;
      }

      // optional float memory_cost = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_memory_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &memory_cost_)));
          set_has_memory_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fragment_json;
        break;
      }

      // optional string fragment_json = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fragment_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fragment_json().data(), this->fragment_json().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_leaf_fragment;
        break;
      }

      // optional bool leaf_fragment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaf_fragment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leaf_fragment_)));
          set_has_leaf_fragment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_assignment;
        break;
      }

      // optional .exec.DrillbitEndpoint assignment = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assignment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_foreman;
        break;
      }

      // optional .exec.DrillbitEndpoint foreman = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_foreman:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_foreman()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mem_initial;
        break;
      }

      // optional int64 mem_initial = 12 [default = 20000000];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_initial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_initial_)));
          set_has_mem_initial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mem_max;
        break;
      }

      // optional int64 mem_max = 13 [default = 20000000000];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_max_)));
          set_has_mem_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_query_start_time;
        break;
      }

      // optional int64 query_start_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &query_start_time_)));
          set_has_query_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_credentials;
        break;
      }

      // optional .exec.shared.UserCredentials credentials = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_credentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credentials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanFragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .exec.bit.FragmentHandle handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->handle(), output);
  }

  // optional float network_cost = 4;
  if (has_network_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->network_cost(), output);
  }

  // optional float cpu_cost = 5;
  if (has_cpu_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cpu_cost(), output);
  }

  // optional float disk_cost = 6;
  if (has_disk_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->disk_cost(), output);
  }

  // optional float memory_cost = 7;
  if (has_memory_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->memory_cost(), output);
  }

  // optional string fragment_json = 8;
  if (has_fragment_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fragment_json().data(), this->fragment_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->fragment_json(), output);
  }

  // optional bool leaf_fragment = 9;
  if (has_leaf_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->leaf_fragment(), output);
  }

  // optional .exec.DrillbitEndpoint assignment = 10;
  if (has_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->assignment(), output);
  }

  // optional .exec.DrillbitEndpoint foreman = 11;
  if (has_foreman()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->foreman(), output);
  }

  // optional int64 mem_initial = 12 [default = 20000000];
  if (has_mem_initial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->mem_initial(), output);
  }

  // optional int64 mem_max = 13 [default = 20000000000];
  if (has_mem_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->mem_max(), output);
  }

  // optional int64 query_start_time = 14;
  if (has_query_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->query_start_time(), output);
  }

  // optional .exec.shared.UserCredentials credentials = 15;
  if (has_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->credentials(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanFragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .exec.bit.FragmentHandle handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->handle(), target);
  }

  // optional float network_cost = 4;
  if (has_network_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->network_cost(), target);
  }

  // optional float cpu_cost = 5;
  if (has_cpu_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cpu_cost(), target);
  }

  // optional float disk_cost = 6;
  if (has_disk_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->disk_cost(), target);
  }

  // optional float memory_cost = 7;
  if (has_memory_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->memory_cost(), target);
  }

  // optional string fragment_json = 8;
  if (has_fragment_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fragment_json().data(), this->fragment_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fragment_json(), target);
  }

  // optional bool leaf_fragment = 9;
  if (has_leaf_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->leaf_fragment(), target);
  }

  // optional .exec.DrillbitEndpoint assignment = 10;
  if (has_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->assignment(), target);
  }

  // optional .exec.DrillbitEndpoint foreman = 11;
  if (has_foreman()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->foreman(), target);
  }

  // optional int64 mem_initial = 12 [default = 20000000];
  if (has_mem_initial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->mem_initial(), target);
  }

  // optional int64 mem_max = 13 [default = 20000000000];
  if (has_mem_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->mem_max(), target);
  }

  // optional int64 query_start_time = 14;
  if (has_query_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->query_start_time(), target);
  }

  // optional .exec.shared.UserCredentials credentials = 15;
  if (has_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->credentials(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanFragment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .exec.bit.FragmentHandle handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handle());
    }

    // optional float network_cost = 4;
    if (has_network_cost()) {
      total_size += 1 + 4;
    }

    // optional float cpu_cost = 5;
    if (has_cpu_cost()) {
      total_size += 1 + 4;
    }

    // optional float disk_cost = 6;
    if (has_disk_cost()) {
      total_size += 1 + 4;
    }

    // optional float memory_cost = 7;
    if (has_memory_cost()) {
      total_size += 1 + 4;
    }

    // optional string fragment_json = 8;
    if (has_fragment_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fragment_json());
    }

    // optional .exec.DrillbitEndpoint assignment = 10;
    if (has_assignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assignment());
    }

    // optional bool leaf_fragment = 9;
    if (has_leaf_fragment()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .exec.DrillbitEndpoint foreman = 11;
    if (has_foreman()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->foreman());
    }

    // optional int64 mem_initial = 12 [default = 20000000];
    if (has_mem_initial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mem_initial());
    }

    // optional int64 mem_max = 13 [default = 20000000000];
    if (has_mem_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mem_max());
    }

    // optional int64 query_start_time = 14;
    if (has_query_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->query_start_time());
    }

    // optional .exec.shared.UserCredentials credentials = 15;
    if (has_credentials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->credentials());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanFragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanFragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanFragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanFragment::MergeFrom(const PlanFragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      mutable_handle()->::exec::bit::FragmentHandle::MergeFrom(from.handle());
    }
    if (from.has_network_cost()) {
      set_network_cost(from.network_cost());
    }
    if (from.has_cpu_cost()) {
      set_cpu_cost(from.cpu_cost());
    }
    if (from.has_disk_cost()) {
      set_disk_cost(from.disk_cost());
    }
    if (from.has_memory_cost()) {
      set_memory_cost(from.memory_cost());
    }
    if (from.has_fragment_json()) {
      set_fragment_json(from.fragment_json());
    }
    if (from.has_assignment()) {
      mutable_assignment()->::exec::DrillbitEndpoint::MergeFrom(from.assignment());
    }
    if (from.has_leaf_fragment()) {
      set_leaf_fragment(from.leaf_fragment());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_foreman()) {
      mutable_foreman()->::exec::DrillbitEndpoint::MergeFrom(from.foreman());
    }
    if (from.has_mem_initial()) {
      set_mem_initial(from.mem_initial());
    }
    if (from.has_mem_max()) {
      set_mem_max(from.mem_max());
    }
    if (from.has_query_start_time()) {
      set_query_start_time(from.query_start_time());
    }
    if (from.has_credentials()) {
      mutable_credentials()->::exec::shared::UserCredentials::MergeFrom(from.credentials());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanFragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanFragment::CopyFrom(const PlanFragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanFragment::IsInitialized() const {

  return true;
}

void PlanFragment::Swap(PlanFragment* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(network_cost_, other->network_cost_);
    std::swap(cpu_cost_, other->cpu_cost_);
    std::swap(disk_cost_, other->disk_cost_);
    std::swap(memory_cost_, other->memory_cost_);
    std::swap(fragment_json_, other->fragment_json_);
    std::swap(assignment_, other->assignment_);
    std::swap(leaf_fragment_, other->leaf_fragment_);
    std::swap(foreman_, other->foreman_);
    std::swap(mem_initial_, other->mem_initial_);
    std::swap(mem_max_, other->mem_max_);
    std::swap(query_start_time_, other->query_start_time_);
    std::swap(credentials_, other->credentials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanFragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanFragment_descriptor_;
  metadata.reflection = PlanFragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkQueueStatus::kEndpointFieldNumber;
const int WorkQueueStatus::kQueueLengthFieldNumber;
const int WorkQueueStatus::kReportTimeFieldNumber;
#endif  // !_MSC_VER

WorkQueueStatus::WorkQueueStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkQueueStatus::InitAsDefaultInstance() {
  endpoint_ = const_cast< ::exec::DrillbitEndpoint*>(&::exec::DrillbitEndpoint::default_instance());
}

WorkQueueStatus::WorkQueueStatus(const WorkQueueStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkQueueStatus::SharedCtor() {
  _cached_size_ = 0;
  endpoint_ = NULL;
  queue_length_ = 0;
  report_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkQueueStatus::~WorkQueueStatus() {
  SharedDtor();
}

void WorkQueueStatus::SharedDtor() {
  if (this != default_instance_) {
    delete endpoint_;
  }
}

void WorkQueueStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkQueueStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkQueueStatus_descriptor_;
}

const WorkQueueStatus& WorkQueueStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BitControl_2eproto();
  return *default_instance_;
}

WorkQueueStatus* WorkQueueStatus::default_instance_ = NULL;

WorkQueueStatus* WorkQueueStatus::New() const {
  return new WorkQueueStatus;
}

void WorkQueueStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_endpoint()) {
      if (endpoint_ != NULL) endpoint_->::exec::DrillbitEndpoint::Clear();
    }
    queue_length_ = 0;
    report_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkQueueStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .exec.DrillbitEndpoint endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_queue_length;
        break;
      }

      // optional int32 queue_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_length_)));
          set_has_queue_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_report_time;
        break;
      }

      // optional int64 report_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_report_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &report_time_)));
          set_has_report_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkQueueStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .exec.DrillbitEndpoint endpoint = 1;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->endpoint(), output);
  }

  // optional int32 queue_length = 2;
  if (has_queue_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->queue_length(), output);
  }

  // optional int64 report_time = 3;
  if (has_report_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->report_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkQueueStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .exec.DrillbitEndpoint endpoint = 1;
  if (has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->endpoint(), target);
  }

  // optional int32 queue_length = 2;
  if (has_queue_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->queue_length(), target);
  }

  // optional int64 report_time = 3;
  if (has_report_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->report_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkQueueStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .exec.DrillbitEndpoint endpoint = 1;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoint());
    }

    // optional int32 queue_length = 2;
    if (has_queue_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_length());
    }

    // optional int64 report_time = 3;
    if (has_report_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->report_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkQueueStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkQueueStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkQueueStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkQueueStatus::MergeFrom(const WorkQueueStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endpoint()) {
      mutable_endpoint()->::exec::DrillbitEndpoint::MergeFrom(from.endpoint());
    }
    if (from.has_queue_length()) {
      set_queue_length(from.queue_length());
    }
    if (from.has_report_time()) {
      set_report_time(from.report_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkQueueStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkQueueStatus::CopyFrom(const WorkQueueStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkQueueStatus::IsInitialized() const {

  return true;
}

void WorkQueueStatus::Swap(WorkQueueStatus* other) {
  if (other != this) {
    std::swap(endpoint_, other->endpoint_);
    std::swap(queue_length_, other->queue_length_);
    std::swap(report_time_, other->report_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkQueueStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkQueueStatus_descriptor_;
  metadata.reflection = WorkQueueStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace bit
}  // namespace exec

// @@protoc_insertion_point(global_scope)
